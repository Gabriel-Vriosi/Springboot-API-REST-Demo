openapi: 3.0.0

info:
  title: Rest API Demo
  description: |-
    This a demo to learn and practice and for personal purposes.
    
    This demo does not correctly reflect the definition of the API.
    there are probably bugs.

    Base url: http://localhost:8080/swagger-ui/index.html
  version: 1.0.0
  termsOfService: http://swagger.io/terms/
  contact:
    email: gabrielvriosi@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
    
servers:
  - url: http://localhost:8080/api-docs - Generated server url
  
tags:
  - name: Client
    description: Methods for "Client"

paths:
  /Client/:
    get:
      tags:
        - Client
      summary: Retrieves all clients on the database
      description: "Can return an empty list"
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/Client'
                 
    post:
      tags:
        - Client
      summary: Saves a Client object to the database
      description: |- 
        The new Client must have a unique "documentNumberId"
      
      responses:
        '200':
          description: "Client saved to database"
        '409':
          description: "This doc. ID: ... is already used"
          
    put:
      tags:
        - Client
      summary: Updates a Client object in the database
      description: |- 
        You must retrieve all the fields of the Client and override the ones you want, otherwise the not updated fields will be "null"
      
      responses:
        '200':
          description: "Client updated on the database"
        '400':
          description: "Error updating client, not found"
        '500':
          description: "Error updating client"
               
  /Client/{clientId}:
    get:
      tags:
        - Client
      summary: Retrieves a Client object by his ID
      description: |- 
        Retrieves only one Client by his ID (not to confuse with "documentNumberId")
        
        ID cannot be null
      parameters:
        - name: clientId
          in: path
          description: ID of client to return
          required: true
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          description: Bad request
        '404':
          description: Not found
          
    delete:
      tags:
        - Client
      summary: Deletes a Client from the database by his ID
      description: ID cannot be null
      parameters:
        - name: clientId
          in: path
          description: ID of client to delete
          required: true
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: "Client deleted from database"
        '400':
          description: "Error deleting client, null ID"
        '404':
          description: "Value not found"
                   
               
components:
  schemas:              
    Client:
      required: 
        - documentNumberId
        - name
      type: object
      properties:
        id:
          type: string
          format: int64
          example: 123245
          description: "(Autogenerated by the database)"
        documentNumberId:
          type: string
          format: int64
          example: 4567892
        name:
          type: string
          example: Elon Musk
        phoneNumber:
          type: string
          example: 45687321